<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class jubianchiBehatViewerBundleEntityFeatureProxy extends \jubianchi\BehatViewerBundle\Entity\Feature implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function addScenario(\jubianchi\BehatViewerBundle\Entity\Scenario $scenarios)
    {
        $this->__load();
        return parent::addScenario($scenarios);
    }

    public function getScenarios()
    {
        $this->__load();
        return parent::getScenarios();
    }

    public function getScenariosCount()
    {
        $this->__load();
        return parent::getScenariosCount();
    }

    public function getHavingStatusScenarios($status)
    {
        $this->__load();
        return parent::getHavingStatusScenarios($status);
    }

    public function getPassedScenarios()
    {
        $this->__load();
        return parent::getPassedScenarios();
    }

    public function getPassedScenariosCount()
    {
        $this->__load();
        return parent::getPassedScenariosCount();
    }

    public function getFailedScenarios()
    {
        $this->__load();
        return parent::getFailedScenarios();
    }

    public function getFailedScenariosCount()
    {
        $this->__load();
        return parent::getFailedScenariosCount();
    }

    public function getStepsHavingStatus($status = NULL)
    {
        $this->__load();
        return parent::getStepsHavingStatus($status);
    }

    public function getStepsHavingStatusCount($status = NULL)
    {
        $this->__load();
        return parent::getStepsHavingStatusCount($status);
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function addTag(\jubianchi\BehatViewerBundle\Entity\Tag $tags)
    {
        $this->__load();
        return parent::addTag($tags);
    }

    public function addTags(array $tags)
    {
        $this->__load();
        return parent::addTags($tags);
    }

    public function getTags()
    {
        $this->__load();
        return parent::getTags();
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function addBuild(\jubianchi\BehatViewerBundle\Entity\Build $builds)
    {
        $this->__load();
        return parent::addBuild($builds);
    }

    public function getBuilds()
    {
        $this->__load();
        return parent::getBuilds();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'slug', 'description', 'builds', 'scenarios', 'tags');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}