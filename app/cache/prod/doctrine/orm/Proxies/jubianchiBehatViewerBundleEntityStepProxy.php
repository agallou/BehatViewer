<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class jubianchiBehatViewerBundleEntityStepProxy extends \jubianchi\BehatViewerBundle\Entity\Step implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setBackground($background)
    {
        $this->__load();
        return parent::setBackground($background);
    }

    public function getBackground()
    {
        $this->__load();
        return parent::getBackground();
    }

    public function setCleanText($cleanText)
    {
        $this->__load();
        return parent::setCleanText($cleanText);
    }

    public function getCleanText()
    {
        $this->__load();
        return parent::getCleanText();
    }

    public function setText($text)
    {
        $this->__load();
        return parent::setText($text);
    }

    public function getText()
    {
        $this->__load();
        return parent::getText();
    }

    public function setFile($file)
    {
        $this->__load();
        return parent::setFile($file);
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function setLine($line)
    {
        $this->__load();
        return parent::setLine($line);
    }

    public function getLine()
    {
        $this->__load();
        return parent::getLine();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setDefinition($definition)
    {
        $this->__load();
        return parent::setDefinition($definition);
    }

    public function getDefinition()
    {
        $this->__load();
        return parent::getDefinition();
    }

    public function setSnippet($snippet)
    {
        $this->__load();
        return parent::setSnippet($snippet);
    }

    public function getSnippet()
    {
        $this->__load();
        return parent::getSnippet();
    }

    public function setScreen($screen)
    {
        $this->__load();
        return parent::setScreen($screen);
    }

    public function getScreen()
    {
        $this->__load();
        return parent::getScreen();
    }

    public function setException($exception)
    {
        $this->__load();
        return parent::setException($exception);
    }

    public function getException()
    {
        $this->__load();
        return parent::getException();
    }

    public function setScenario(\jubianchi\BehatViewerBundle\Entity\Scenario $scenario)
    {
        $this->__load();
        return parent::setScenario($scenario);
    }

    public function getScenario()
    {
        $this->__load();
        return parent::getScenario();
    }

    public function setArgument($argument)
    {
        $this->__load();
        return parent::setArgument($argument);
    }

    public function getArgument()
    {
        $this->__load();
        return parent::getArgument();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'type', 'background', 'clean_text', 'text', 'file', 'line', 'status', 'definition', 'argument', 'snippet', 'screen', 'exception', 'scenario');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}